<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_sn_devops_in.SimulateDevOps</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description>Simulate DevOps calls</description>
        <name>SimulateDevOps</name>
        <script><![CDATA[var SimulateDevOps = Class.create();
SimulateDevOps.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    stages: [{
        "name": "build"
    }, {
        "name": "test"
    }, {
        "name": "securityscan"
    }, {
        "name": "changeControl"
    }, {
        "name": "deploy"
    }],

    pipelineInfo: {},

    getOrchestrationEventPayload: function() {

        var pipelineSysId = this.getParameter("sysparm_pipeline_sys_id");
        var pipelineTableData = new global.GlideQuery("sn_devops_pipeline").get(pipelineSysId, ['name', 'tool.sys_id', 'pipeline_url', 'orch_pipeline']);
        this.pipelineInfo = pipelineTableData._value;
        this.pipelineInfo.buildNumber = gs.generateGUID();

		gs.info("SimulateDevOps pipelineInfo " + JSON.stringify(this.pipelineInfo));

        var simulationData = [];
        for (var i in this.stages) {
            var simulationDataForStage = this.getOrchestrationEventPayloadForStage(this.pipelineInfo, i);
            simulationData = simulationData.concat(simulationDataForStage);
        }
        return JSON.stringify(simulationData);

    },

    getOrchestrationEventPayloadForStage: function(pipelineInfo, stageNumber) {
        var simulationData = [];
        var startEvent = this.getOrchestrationStartEventPayload(pipelineInfo, stageNumber);
        simulationData.push(startEvent);
        var endEvent = this.getOrchestrationEndEventPayload(startEvent);
        simulationData.push(endEvent);
        return simulationData;

    },

    getOrchestrationStartEventPayload: function(pipelineInfo, stageNumber) {

        if (pipelineInfo) {
            return this.getSimulationData(pipelineInfo, stageNumber);
        }
        return {};
    },

    getOrchestrationEndEventPayload: function(startEvent) {

        var simulationData = JSON.parse(JSON.stringify(startEvent));
        simulationData.taskExecution.result = 'successful';
        simulationData.taskExecution.endDateTime = new GlideDateTime().getDisplayValue();
        return simulationData;
    },

    getSimulationData: function(pipelineInfo, stageNumber) {

        var dateTime = new GlideDateTime().getDisplayValue();
        var payloadTemplate = {
            "taskExecution": {
                "toolId": pipelineInfo.tool.sys_id,
                "buildNumber": pipelineInfo.buildNumber,
                "nativeId": pipelineInfo.buildNumber,
                "name": this.stages[stageNumber].name + "#" + pipelineInfo.buildNumber,
                "id": this.stages[stageNumber].name + "#" + pipelineInfo.buildNumber,
                "url": pipelineInfo.pipeline_url + "/" + this.stages[stageNumber].name + "/#" + pipelineInfo.buildNumber,
                "isMultiBranch": "false",
                "branchName": "main",
                "pipelineExecutionUrl": pipelineInfo.pipeline_url + "/" + this.stages[stageNumber].name + "/" + pipelineInfo.buildNumber,
                "orchestrationTaskUrl": pipelineInfo.pipeline_url + "/" + this.stages[stageNumber].name + "/",
                "orchestrationTaskName": pipelineInfo.orch_pipeline + "#" + this.stages[stageNumber].name,
                "result": "building",
                "startDateTime": dateTime,
                "upstreamId": stageNumber >0 ? this.stages[stageNumber-1].name + "#" + pipelineInfo.buildNumber  : "",
				"upstreamTaskUrl": stageNumber >0 ? pipelineInfo.pipeline_url + "/" + this.stages[stageNumber-1].name + "/#" + pipelineInfo.buildNumber : "",
            },
            "orchestrationTask": {
                "orchestrationTaskURL": pipelineInfo.pipeline_url + "/" + this.stages[stageNumber].name + "/",
                "orchestrationTaskName": pipelineInfo.orch_pipeline + "#" + this.stages[stageNumber].name,
                "branchName": "main",
                "toolId": pipelineInfo.tool.sys_id
            }
        };

        return payloadTemplate;
    },

    type: 'SimulateDevOps'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-07-05 02:54:28</sys_created_on>
        <sys_id>9fc50952537321103b58ddeeff7b12fa</sys_id>
        <sys_mod_count>64</sys_mod_count>
        <sys_name>SimulateDevOps</sys_name>
        <sys_package display_value="sn_devops_ints_template" source="x_snc_sn_devops_in">535bff0e97d76910b1397b2e6253af39</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="sn_devops_ints_template">535bff0e97d76910b1397b2e6253af39</sys_scope>
        <sys_update_name>sys_script_include_9fc50952537321103b58ddeeff7b12fa</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-07-08 07:12:20</sys_updated_on>
    </sys_script_include>
</record_update>
